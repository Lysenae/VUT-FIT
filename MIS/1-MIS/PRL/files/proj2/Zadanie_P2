Implementace algoritmu "Enumeration sort"

Pomocí knihovny Open MPI implementujte v jazyce C/C++ algoritmus Enumeration sort
na lineárním poli o n procesorech - viz slajdy PRL.

Deadline: 9. 4. 2017

Vstup: Vstupem je posloupnost náhodných čísel uložená v souboru.

Soubor numbers
  Soubor numbers obsahující čísla velikosti 1 byte, která jdou bez mezery za sebou.
  Pro příklad vytvoření tohoto souboru prostudujte soubor test (sekce ukázkové
    zdrojové kódy), ve kterém je ukázáno vytvoření takovéto posloupnosti náhodných
    čísel a její uložení do souboru pomocí utility dd. Tato utilita generuje náhodná
    čísla v rozsahu určeném velikostí bloku. Při bloku 1B jsou hodnoty v rozsahu 0-255.
  Vygenerovaná čísla jsou pak přesměrována do souboru. Vznikne tedy další soubor s
    náhodnými znaky jdoucími bez mezery za sebou. Po otevření v libovolném textovém
    editoru se hodnoty tváří jako náhodné ascii znaky, které by však měly být chápany
    jako celá čísla. Soubor je v tomto případě chápan jako binární.

Výstup: Výstup na stdout se skládá ze dvou částí:
  Jednotlivé načtené neseřazené hodnoty v jednom řádku oddělené mezerou
    (vypsat po načtení prvním procesorem).
  Jednotlivé seřazené hodnoty oddělené novým řádkem (od nejmenšího po největší).
  Případné nežádoucí výstupy testovacího skriptu přesměrujte na /dev/null.

Příklad výstupu:
3 66 2 54
2
3
54
66

Postup

Vytvořte testovací skript, který bude řídit testování.
Tento skript bude mít tyto vlastnosti:
  Bude pojmenován test nebo test.sh
  Bude přijímat nejvýše 1 parametr a to pocet_hodnot
  Skript vytvoří podle velikosti parametru pocet_hodnot soubor "numbers" s
    náhodnými čísly a následně spustí program s počtem procesorů daným počtem
    hodnot + 1, kde n+1 procesor je považován za řídicí a provádí načtení čísel ze
    souboru a jejich distribuci. Nakonec po sobě skript uklidí binárky a soubor
    "numbers". Vzhledem ke strojové kontrole výsledků se v odevzdané verzi kódu
    nebudou vyskytovat žádné jiné výstupy než uvedené a ze stejných důvodů je třeba
    dodržet výše uvedené body týkající se testovacího skriptu. Za nedodržení těchto
    požadavků budou strhávány body.

Implementace

Algoritmus implementujte v jazyce C/C++ pomocí knihovny Open MPI.
Pro zdárný výsledek implementace je třeba algoritmus důsledně nastudovat a pochopit.

Dokumentace

Součástí řešení je dokumentace, která bude o rozsahu maximálně 3 strany
  (rozumné a odůvodněné překročení limitu stran není důvod k bodové srážce)
  funkčního textu.

Do dokumentace nedávejte:

Úvodní stranu, obsah, popis zadání.
V dokumentaci popište:
  Rozbor a analýzu algoritmu, odvoďte jeho teoretickou složitost
    (časovou a prostorovou náročnost, celkovou cenu).
  Implementaci.
  Experimenty s různě velkými vstupy pro ověření časové složitosti
    (očekává se graf, nikoliv tabulka), nikoliv měření počtu kroků algoritmu.
  Komunikační protokol, jak si "procesy" zasílají zprávy. Pro vizualizaci
    použijte sekvenční diagram (http://en.wikipedia.org/wiki/Sequence_diagram).
    Nezapomeňte, že protokol musí být obecný, tedy pro n procesů.
  Závěr, ve kterém zhodnotíte dosažené výsledky, zamyšlení, zdali experimenty
    potvrdily teoretickou složitost, případně vysvětlení, proč tato teoretická
    složitost nebyla dodržena.
  Pozor, hodnotí se i to, jak dokumentace působí!
    (Zejména vzhled, správná čeština/slovenština/angličtina.)
  Knihovna Open MPI je navržena na praktické použití, proto neobsahuje žádné
    implicitní metody pro měření složitosti algoritmů. Je tedy třeba vymyslet
    nějaký explicitní způsob jejího měření a ten pak zdůvodnit v dokumentaci!

Odevzdání

Do wisu se odevzdává jeden archiv xlogin00.{tar|tgz|zip}, který bude velký do 1MB,
a který obsahuje:
  zdrojový kód: es.{c|cpp},
  hlavička: es.h (pokud ji využijete),
  testovací shellový skript: {test|test.sh},
  dokumentaci: xlogin00.pdf,
  nic jiného...

Platí, že za nedodržení těchto požadavků budou strhávány body. Počítejte s tím,
že veškerá uvedená jména souborů jsou case sensitive.
